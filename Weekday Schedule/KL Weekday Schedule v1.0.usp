/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
This module implements a simple weekly schedule.  To enable the schedule on
certain days, put a 1 (to enable) or 0 (to disable) on those inputs.  Start
and end times are specified as 24-hour (e.g.: 05:30 for 5:30am, or 21:00 for
9:00pm).  The start time MUST occur before the end time.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT sunday, monday, tuesday, wednesday, thursday, friday, saturday;
// ANALOG_INPUT 
// STRING_INPUT
// BUFFER_INPUT 

DIGITAL_OUTPUT trigger_on, trigger_off;
// ANALOG_OUTPUT 
// STRING_OUTPUT 

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER start_time[20], end_time[20];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Global Variables
*******************************************************************************************/

INTEGER start_hour, start_minute;
INTEGER end_hour, end_minute;
INTEGER now_hour, now_minute;

/*******************************************************************************************
  Functions
*******************************************************************************************/

FUNCTION TurnOn ()
{
	trigger_off = 0;
	trigger_on  = 1;
}

FUNCTION TurnOff ()
{
	trigger_on  = 0;
	trigger_off = 1;
}

INTEGER_FUNCTION ConvertTimeToHours (STRING tm)
{
	INTEGER hr;
	
	hr = AtoI(tm);
	
	Return(hr);
}

INTEGER_FUNCTION ConvertTimeToMinutes (STRING tm)
{
	INTEGER mins;
	STRING  tmp[10];
	
	tmp = Remove(":", tm);
	mins = AtoI(tm);
	
	Return(mins);
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	SIGNED_INTEGER res;
	INTEGER dow;
	
    res = WaitForInitializationComplete();
    
    // Convert start time to hours and minutes
    start_hour = ConvertTimeToHours(start_time);
    start_minute = ConvertTimeToMinutes(start_time);
    
    // Convert end time to hours and minutes
    end_hour = ConvertTimeToHours(end_time);
    end_minute = ConvertTimeToMinutes(end_time);
    
    While (1)
    {
    	// Grab day of week
    	dow = GetDayOfWeekNum();
    	
    	// Are we enabled today?
    	If (((dow = 0) && (sunday)) ||
    	    ((dow = 1) && (monday)) ||
    	    ((dow = 2) && (tuesday)) ||
    	    ((dow = 3) && (wednesday)) ||
    	    ((dow = 4) && (thursday)) ||
    	    ((dow = 5) && (friday)) ||
    	    ((dow = 6) && (saturday))) {
    		
	    	// Grab current time in hours, seconds
    		now_hour = GetHourNum();
    		now_minute = GetMinutesNum();
    		
    		// Are we after the start time?
    		If (now_hour >= start_hour) {
    			// Are we before the end time?
    			If (now_hour <= end_hour) {
    				// Are we in the start hour?
    				If (now_hour = start_hour) {
    					// Check minutes
    					If (now_minute >= start_minute) {
    						// Within operating hours
    						TurnOn();
    					}
    					Else {
    						// Before hours
    						TurnOff();
    					}
    				}
    				Else {
    					// Are we in the end hour?
    					If (now_hour = end_hour) {
    						// Check minutes
    						If (now_minute >= end_minute) {
    							// After hours
    							TurnOff();
    						}
    						Else {
    							// Within operating hours
    							TurnOn();
    						}
    					}
    					Else {
    						// Within operating hours
    						TurnOn();
    					}
    				}
    			}
    			Else {
    				// After hours
    				TurnOff();
    			}
    		}
    		Else {
    			// Before hours
    			TurnOff();
    		}
    	}
    	Else {
    		// Schedule is off today
    		TurnOff();
    	}
    	
    	// Sleep for 5 seconds, let the system process other logic
    	Delay(500);
    }
}

