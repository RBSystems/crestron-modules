/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
This module implements a simple weekly schedule.  To enable the schedule on
certain days, put a 1 (to enable) or 0 (to disable) on those inputs.  Start
and end times are specified as 24-hour (e.g.: 05:30 for 5:30am, or 21:00 for
9:00pm).  The start time MUST occur before the end time.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT sunday, monday, tuesday, wednesday, thursday, friday, saturday;
// ANALOG_INPUT 
// STRING_INPUT
// BUFFER_INPUT 

DIGITAL_OUTPUT trigger_on, trigger_off;
// ANALOG_OUTPUT 
// STRING_OUTPUT 

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER start_time[20], end_time[20];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Global Variables
*******************************************************************************************/

INTEGER start_hour, start_minute;
INTEGER end_hour, end_minute;
INTEGER now_hour, now_minute;

/*******************************************************************************************
  Functions
*******************************************************************************************/

Function TurnOn ()
{
	trigger_off = 0;
	trigger_on  = 1;
}

Function TurnOff ()
{
	trigger_on  = 0;
	trigger_off = 1;
}

INTEGER_Function ConvertTimeToHours (STRING tm)
{
	INTEGER hr;
	
	hr = AtoI(tm);
	
	Return(hr);
}

INTEGER_Function ConvertTimeToMinutes (STRING tm)
{
	INTEGER mins;
	STRING  tmp[10];
	
	tmp = Remove(":", tm);
	mins = AtoI(tm);
	
	Return(mins);
}

INTEGER_Function CheckOperatingHours ()
{
	INTEGER dow;
	
   	// Grab day of week
   	dow = GetDayOfWeekNum();
   	
   	// Grab current time in hours, seconds
	now_hour = GetHourNum();
	now_minute = GetMinutesNum();	

   	// Are we enabled today?
   	If (((dow = 0) && (sunday)) ||
   	    ((dow = 1) && (monday)) ||
   	    ((dow = 2) && (tuesday)) ||
   	    ((dow = 3) && (wednesday)) ||
   	    ((dow = 4) && (thursday)) ||
   	    ((dow = 5) && (friday)) ||
   	    ((dow = 6) && (saturday))) {
   		// We are!
   		
   		// Are we after the start hour?
   		If (now_hour >= start_hour) {
   			// Are we after the start minute?
   			If (now_minute >= start_minute) {
   				// Are we before the end hour?
   				If (now_hour <= end_hour) {
   					// Are we before the end minute?
   					If (now_minute < end_minute) {
   						// We're enabled!
   						TurnOn();
   						
   						// Are we in the ending hour?
   						If (now_hour = end_hour) {
   							// Sleep 15 seconds
   							Return(1500);
   						}
   						Else {
   							// Sleep 5 minutes
   							Return(30000);
   						}
   					}
   					Else {
   						// No longer enabled
   						TurnOff();
   						
   						// Sleep 10 minutes
   						Return(60000);
   					}
   				}
   				Else {
   					// No longer enabled
   					TurnOff();
   					
   					// Sleep 10 minutes
   					Return(60000);
   				}
   			}
   			Else {
   				// Not enabled yet
   				TurnOff();
   				
   				// Sleep 15 seconds
   				Return(1500);
   			}
   		}
   		Else {
   			// Not enabled yet
   			TurnOff();
   			
   			// Are we in the hour prior to start hour?
   			If (now_hour = start_hour - 1) {
   				// How close are we to the next hour?
   				If (now_minute < 55) {
   					// Sleep 5 minutes
   					Return(30000);
   				}
   				Else {
   					// Sleep 1 minute
   					Return(6000);
   				}
   			}
   			Else {
   				// Sleep 10 minutes
   				Return(60000);
   			}
   		}
   	}
   	Else {
   		// Not enabled today...
   		TurnOff();
   		
   		// How close are we to tomorrow?
   		If (now_hour = 23) {
   			If (now_minute < 55) {
   				// Sleep 5 minutes
   				Return(30000);
   			}
   			Else {
   				// Sleep 1 minute
   				Return(6000);
   			}
   		}
   		Else {
   			// Sleep 10 minutes
   			Return(60000);
   		}
   	}
   	
   	// Shouldn't get here, but just in case
   	Return(500);
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	INTEGER snooze;
	
    WaitForInitializationComplete();
    
    // Convert start time to hours and minutes
    start_hour = ConvertTimeToHours(start_time);
    start_minute = ConvertTimeToMinutes(start_time);
    
    // Convert end time to hours and minutes
    end_hour = ConvertTimeToHours(end_time);
    end_minute = ConvertTimeToMinutes(end_time);
    
    While (1)
    {
    	snooze = CheckOperatingHours();
	    Delay(snooze);
    }
}

