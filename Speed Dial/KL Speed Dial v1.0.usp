/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT MAX_ENTRIES 10
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Save, Recall;
DIGITAL_INPUT Select[MAX_ENTRIES];
// ANALOG_INPUT 
STRING_INPUT  Number_In[50], Name_In[200];
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT Number_Out;
STRING_OUTPUT Name_Out[MAX_ENTRIES];

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER FileName[255];

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

STRUCTURE TSPEEDDIAL
{
	STRING EntryName[200];
	STRING Number[50];
};

NONVOLATILE TSPEEDDIAL SpeedDial[MAX_ENTRIES];

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
VOLATILE INTEGER SpeedDialIndex;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
VOLATILE STRING NumberIn[50];
VOLATILE STRING NameIn[200];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function LoadFromFile()
{
	SIGNED_INTEGER fileHandle;
	SIGNED_INTEGER result;
	INTEGER i;
	STRING textBuffer[1024];
	STRING textLine[255];
	STRING temp[255];

	If (StartFileOperations() = 0)
	{
		fileHandle = FileOpen(FileName, _O_RDONLY | _O_TEXT);

		If (fileHandle >= 0)
		{
			textBuffer = "";
			i = 1;

			While (FileEOF(fileHandle) = 0)
			{
				If (i > MAX_ENTRIES)
				{
					Break;
				}

				result = FileRead(fileHandle, textLine, 255);
				textBuffer = textBuffer + textLine;
            
				While (Find("\n", textBuffer))
				{
					If (i > MAX_ENTRIES)
					{
						Break;
					}

					textLine = Remove("\n", textBuffer);

					temp = Remove("|", textLine);
					SpeedDial[i].EntryName = Left(temp, Len(temp) - 1);

					temp = Left(textLine, Len(textLine) - 2);
					SpeedDial[i].Number = temp;

					i = i + 1;		
				}
			}

			While (Find("\n", textBuffer))
			{
				If (i > MAX_ENTRIES)
				{
					Break;
				}

				textLine = Remove("\n", textBuffer);

				temp = Remove("|", textLine);
				SpeedDial[i].EntryName = Left(temp, Len(temp) - 1);

				temp = Left(textLine, Len(textLine) - 2);
				SpeedDial[i].Number = temp;

				i = i + 1;		
			}
			
			FileClose(fileHandle);
		}

		EndFileOperations();
	}
}

Function SaveToFile()
{
	SIGNED_INTEGER fileHandle;
	SIGNED_INTEGER result;	
	INTEGER i;
	STRING textLine[255];

	If (StartFileOperations() = 0)
	{
		fileHandle = FileOpen(FileName, _O_WRONLY | _O_CREAT | _O_TEXT);

		If (fileHandle >= 0)
		{
			For (i = 1 To MAX_ENTRIES)
			{
				MakeString(textLine, "%s|%s\n", SpeedDial[i].EntryName, SpeedDial[i].Number);

				result = FileWrite(fileHandle, textLine, Len(textLine));

				If (result <= 0)
				{
					Break;
				}
			}

			FileClose(fileHandle);
		}

		EndFileOperations();
	}
}

Function UpdateNames()
{
	INTEGER i;

	For (i = 1 To MAX_ENTRIES)
	{
		Name_Out[i] = SpeedDial[i].EntryName;
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Select
{
	SpeedDialIndex = GetLastModifiedArrayIndex();
}

CHANGE Number_In
{
	NumberIn = Number_In;
}

CHANGE Name_In
{
	NameIn = Name_In;
}

PUSH Save
{
	If (SpeedDialIndex > 0)
	{
		SpeedDial[SpeedDialIndex].EntryName = NameIn;
		SpeedDial[SpeedDialIndex].Number = NumberIn;

		UpdateNames();
		SaveToFile();
	}
}

PUSH Recall
{
	If (SpeedDialIndex > 0)
	{
		Number_Out = SpeedDial[SpeedDialIndex].Number;
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	INTEGER i;

	For (i = 1 To MAX_ENTRIES)
	{
		SpeedDial[i].EntryName = "New Entry";
		SpeedDial[i].Number = ItoA(i);
	}

    WaitForInitializationComplete();
	LoadFromFile();
	UpdateNames();
}
